using System;using System.Text;using System.Security.Cryptography;namespace SharpStackConvert{    public static class ByteArrayExtensions    {        /// <summary>        /// Converts a byte array to a SHA1 hash string using the specified encoding.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <param name="encoding">The encoding to use.</param>        /// <returns>The SHA1 hash string.</returns>        public static string ToSHA1(this byte[] input, Encoding encoding)        {            if (input == null)                return "";            using var sha1 = SHA1.Create();            var hashedBytes = sha1.ComputeHash(input);            // Get the hashed string.              return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to its SHA256 hash representation.        /// </summary>        /// <param name="input">The byte array to be hashed.</param>        /// <param name="encoding">The encoding used to convert the byte array to a string.</param>        /// <returns>The SHA256 hash representation of the byte array.</returns>        public static string ToSHA256(this byte[] input, Encoding encoding)        {            if (input == null)                return "";            using var sha256 = SHA256.Create();            var hashedBytes = sha256.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to a SHA384 hash string using the specified encoding.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <param name="encoding">The encoding to use.</param>        /// <returns>The SHA384 hash string.</returns>        public static string ToSHA384(this byte[] input, Encoding encoding)        {            if (input == null)                return "";            using var sha384 = SHA384.Create();            var hashedBytes = sha384.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to a SHA512 hash string using the specified encoding.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <param name="encoding">The encoding to use.</param>        /// <returns>The SHA512 hash string.</returns>        public static string ToSHA512(this byte[] input, Encoding encoding)        {            if (input == null)            {                return "";            }            using var sha512 = SHA512.Create();            var hashedBytes = sha512.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to its MD5 hash representation.        /// </summary>        /// <param name="input">The byte array to be hashed.</param>        /// <param name="encoding">The encoding used to convert the byte array to string.</param>        /// <returns>The MD5 hash representation of the byte array as a string.</returns>        public static string ToMD5(this byte[] input, Encoding encoding)        {            if (input == null)                return "";            using var md5 = MD5.Create();            var hashedBytes = md5.ComputeHash(input);            // Get the hashed string.              return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to its SHA1 hash representation.        /// </summary>        /// <param name="input">The byte array to be hashed.</param>        /// <returns>The SHA1 hash representation of the input byte array.</returns>        public static string ToSHA1(this byte[] input)        {            if (input == null)                return "";            using var sha1 = SHA1.Create();            var hashedBytes = sha1.ComputeHash(input);            // Get the hashed string.              return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to its SHA256 hash representation.        /// </summary>        /// <param name="input">The byte array to be hashed.</param>        /// <returns>The SHA256 hash representation of the input byte array.</returns>        public static string ToSHA256(this byte[] input)        {            if (input == null)                return "";            using var sha256 = SHA256.Create();            var hashedBytes = sha256.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to a SHA384 hash string.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <returns>The SHA384 hash string.</returns>        public static string ToSHA384(this byte[] input)        {            if (input == null)                return "";            using var sha384 = SHA384.Create();            var hashedBytes = sha384.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to a SHA512 hash string.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <returns>The SHA512 hash string.</returns>        public static string ToSHA512(this byte[] input)        {            if (input == null)                return "";            using var sha512 = SHA512.Create();            var hashedBytes = sha512.ComputeHash(input);            return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to its MD5 hash value.        /// </summary>        /// <param name="input">The byte array to be hashed.</param>        /// <returns>The MD5 hash value as a string.</returns>        public static string ToMD5(this byte[] input)        {            if (input == null)                return "";            using var md5 = MD5.Create();            var hashedBytes = md5.ComputeHash(input);            // Get the hashed string.              return BitConverter.ToString(hashedBytes).Replace("-", "").ToLower();        }        /// <summary>        /// Converts a byte array to a Base64 string.        /// </summary>        /// <param name="input">The byte array to convert.</param>        /// <returns>The Base64 string representation of the byte array.</returns>        public static string ToBase64(this byte[] input) => input == null ? "" : Convert.ToBase64String(input);    }}